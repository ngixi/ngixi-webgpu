name: Build Dawn - win_x86_64-msvc

on:
  workflow_dispatch:
  workflow_call:

jobs:
  setup:
    runs-on: WIN-BUILD
    steps:
      - name: Checkout ngixi-builds repo
        uses: actions/checkout@v4
        with:
          clean: false

      - uses: ./.github/actions/setup-build
        with:
          build-dir: dawn-build

  build-windows:
    runs-on: WIN-BUILD
    needs: setup
    defaults:
      run:
        working-directory: dawn-build
    env:
      DEPOT_TOOLS_WIN_TOOLCHAIN: 0

    steps:
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Checkout Dawn
        shell: pwsh
        run: |
          if (-not (Test-Path dawn)) {
            git clone ${{ vars.DAWN_REPO }} dawn
          }

      - name: Checkout tag
        shell: pwsh
        run: |
          cd dawn
          git fetch --tags --force --quiet
          git checkout --quiet ${{ vars.DAWN_TAG }}
          git rev-parse --short HEAD | Out-File -Encoding ascii ..\DAWN_GIT.txt

      - name: Fetch deps
        shell: pwsh
        run: |
          cd dawn
          Copy-Item scripts/standalone.gclient .gclient -Force
          gclient sync

      - name: Configure (dawn shared dll)
        shell: cmd
        run: |
          cd dawn
          cmake -S . -B out -G Ninja ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DCMAKE_C_COMPILER=cl ^
            -DCMAKE_CXX_COMPILER=cl ^
            -DCMAKE_CXX_FLAGS="/DNOMINMAX /DWIN32_LEAN_AND_MEAN" ^
            -DCMAKE_SYSTEM_VERSION=10.0 ^
            -DBUILD_SHARED_LIBS=OFF ^
            -DDAWN_BUILD_MONOLITHIC_LIBRARY=SHARED ^
            -DDAWN_ENABLE_D3D11=OFF ^
            -DDAWN_ENABLE_D3D12=ON ^
            -DDAWN_ENABLE_METAL=OFF ^
            -DDAWN_ENABLE_NULL=ON ^
            -DDAWN_ENABLE_WEBGPU_ON_WEBGPU=OFF ^
            -DDAWN_ENABLE_DESKTOP_GL=OFF ^
            -DDAWN_ENABLE_OPENGLES=OFF ^
            -DDAWN_ENABLE_VULKAN=OFF ^
            -DDAWN_ENABLE_SPIRV_VALIDATION=OFF ^
            -DDAWN_FORCE_SYSTEM_COMPONENT_LOAD=OFF ^
            -DDAWN_USE_WINDOWS_UI=ON ^
            -DDAWN_USE_BUILT_DXC=ON ^
            -DDAWN_BUILD_SAMPLES=ON

      - name: Build (monolithic SHARED)
        shell: cmd
        run: |
          cd dawn
          cmake --build out --parallel

      - name: Copy DLLs and headers
        shell: pwsh
        run: |
          cd dawn/out
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue zip_assets
          New-Item -ItemType Directory -Force -Path zip_assets/bin
          New-Item -ItemType Directory -Force -Path zip_assets/include
          New-Item -ItemType Directory -Force -Path zip_assets/lib
          Copy-Item -Force *.dll zip_assets/bin/
          Copy-Item -Force gen/include/dawn/webgpu.h zip_assets/include/
          Copy-Item -Force src/dawn/native/webgpu_dawn.lib zip_assets/lib/

      - name: Parse Dawn version
        shell: pwsh
        id: parse-version
        run: |
          $tag = "${{ vars.DAWN_TAG }}"
          # Parse tag, e.g., if "v20251026.130842", version = "2025.10.26"
          if ($tag -match "v(\d{4})(\d{2})(\d{2})\.\d+") {
            $version = "$($matches[1]).$($matches[2]).$($matches[3])"
          } else {
            Write-Error "Unrecognized DAWN_TAG format: $tag"
            exit 1
          }
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - uses: ./.github/actions/make-zig-zon
        with:
          name: "dawn"
          version: ${{ steps.parse-version.outputs.version }}
          output-path: "dawn-build/dawn/out/zip_assets/build.zig.zon"

      - name: Create tar archive
        shell: pwsh
        run: |
          cd dawn/out/zip_assets
          Remove-Item -Force -ErrorAction SilentlyContinue dawn_shared_win_x86_64.tar.gz
          tar -czf dawn_shared_win_x86_64.tar.gz bin include lib build.zig.zon
          Move-Item -Force dawn_shared_win_x86_64.tar.gz ../../../

      - name: Report DLL dependents
        shell: cmd
        run: |
          cd dawn\out\zip_assets\bin
          if exist webgpu_dawn.dll dumpbin /dependents webgpu_dawn.dll > "DEPENDENTS.txt"

      - name: Upload Dawn artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dawn-windows-assets
          path: |
            dawn-build/dawn_shared_win_x86_64.tar.gz
            dawn-build/DAWN_GIT.txt
